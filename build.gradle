import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import net.fabricmc.loom.task.RemapJarTask

plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
}

version = "${project.mod_version}+${project.minecraft_version}"
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"weave-ui" {
			sourceSet sourceSets.client
		}
	}

}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": inputs.properties.version
    }
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
    inputs.property "archivesName", project.base.archivesName

    from("LICENSE") {
        rename { "${it}_${inputs.properties.archivesName}"}
    }
}

def releaseResourcesDir = layout.buildDirectory.dir("releaseResources")

tasks.register("generateReleaseFabricMod") {
    inputs.file("${projectDir}/src/client/resources/fabric.mod.json")
    outputs.file(releaseResourcesDir.map { it.file("fabric.mod.json").asFile })
    doLast {
        def src = file("${projectDir}/src/client/resources/fabric.mod.json")
        def destDir = releaseResourcesDir.get().asFile
        destDir.mkdirs()
        def json = new JsonSlurper().parse(src)
        json.version = project.version
        json.remove('entrypoints')
        def text = JsonOutput.prettyPrint(JsonOutput.toJson(json))
        new File(destDir, 'fabric.mod.json').text = text
    }
}

tasks.register("releaseResources", Copy) {
    from(sourceSets.client.resources.srcDirs) {
        exclude("fabric.mod.json")
    }
    into(releaseResourcesDir)
    dependsOn("generateReleaseFabricMod")
}

tasks.register("releaseJar", Jar) {
    from(sourceSets.client.output) {
        exclude("tytoo/weave/WeaveClient.class")
    }
    from(releaseResourcesDir)
    archiveClassifier.set("release")
    dependsOn("classes", "releaseResources")
}

tasks.register("remapReleaseJar", RemapJarTask) {
    inputFile.set(tasks.named("releaseJar", Jar).flatMap { it.archiveFile })
    archiveClassifier.set("")
    addNestedDependencies.set(false)
    dependsOn("releaseJar")
}

publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            artifact(tasks.named("remapReleaseJar"))
            artifact(tasks.named("remapSourcesJar"))
            
            pom {
                name = project.archives_base_name
                description = "Weave UI: composable UI library for Fabric mods"
                url = "https://github.com/tytoo/Weave"
                licenses {
                    license {
                        name = "MIT License"
                        url = "https://opensource.org/licenses/MIT"
                    }
                }
                scm {
                    url = "https://github.com/tytoo/Weave"
                    connection = "scm:git:https://github.com/tytoo/Weave.git"
                    developerConnection = "scm:git:ssh://git@github.com/tytoo/Weave.git"
                }
            }
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.

        // Publish to GitHub Packages when credentials are provided.
        // Set env vars: GITHUB_ACTOR and GITHUB_TOKEN (with `write:packages`).
        if (System.getenv("GITHUB_ACTOR") != null && System.getenv("GITHUB_TOKEN") != null) {
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/tytoo/Weave")
                credentials {
                    username = System.getenv("GITHUB_ACTOR")
                    password = System.getenv("GITHUB_TOKEN")
                }
            }
        }
    }
}
