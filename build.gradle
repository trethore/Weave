plugins {
    id 'fabric-loom' version "${loom_version}"
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

// version
def mcVersion = project.property('minecraft_version')
def fabricVer = project.property('fabric_version')
def yarnMappings = project.property('yarn_mappings')
def yarnSuffix = yarnMappings.startsWith("${mcVersion}+")
        ? yarnMappings.substring(("${mcVersion}+").length())
        : yarnMappings
def compatSuffix = "${fabricVer}+${yarnSuffix}"

version = "${project.mod_version}-${compatSuffix}"

base {
    archivesName = project.archives_base_name
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
}

loom {
    splitEnvironmentSourceSets() // so sourceSets.client is available
}
def clientSS = sourceSets.named('client')
sourceSets {
    debug {
        java.srcDir 'src/debug/java'
        resources.srcDir 'src/debug/resources'
        compileClasspath += clientSS.get().compileClasspath + clientSS.get().output
        runtimeClasspath += clientSS.get().runtimeClasspath + clientSS.get().output
    }
}

loom {
    mods {
        "weave-ui" {
            sourceSet sourceSets.client
        }
        "weave-debug" {
            sourceSet sourceSets.named('debug').get()
        }
    }
    runs {
        client {
            client()
            source sourceSets.named('client').get() // clean lib run (no debug mod)
            ideConfigGenerated true
        }
        debugClient {
            client()
            source sourceSets.named('debug').get() // dev run (weave-ui + weave-debug)
            // Force-enable Weave perf profiler for debug runs.
            vmArg "-Dweave.debugPerf=true"
            vmArg "-Dweave.debugPerfFrameWindow=60"
            ideConfigGenerated true
        }
    }
}

tasks.named("processDebugResources") {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    inputs.property("version", project.version)
    filesMatching("fabric.mod.json") { expand(version: project.version) }
}

configurations {
    debugImplementation.extendsFrom configurations.clientImplementation
    debugCompileOnly.extendsFrom configurations.clientCompileOnly
    debugRuntimeOnly.extendsFrom configurations.clientRuntimeOnly

    if (configurations.findByName('clientAnnotationProcessor')) {
        debugAnnotationProcessor.extendsFrom configurations.clientAnnotationProcessor
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": inputs.properties.version
    }
}


tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jar {
    inputs.property "archivesName", project.base.archivesName
    from("LICENSE") {
        rename { "${it}_${inputs.properties.archivesName}" }
    }

    exclude 'tytoo/weave_debug/**'
}

tasks.named("processClientResources") {
    inputs.property("version", project.version)
    filesMatching("fabric.mod.json") {
        expand(version: project.version)
    }
}

// configure the maven publication
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            groupId = project.maven_group
            artifactId = project.archives_base_name
            version = project.version

            artifact(tasks.named("remapJar")) {
                builtBy(tasks.named("remapJar"))
            }

            artifact(tasks.named("sourcesJar")) {
                builtBy(tasks.named("sourcesJar"))
                classifier = 'sources'
            }

            pom {
                name = project.archives_base_name
                description = "Weave UI: composable UI library for Fabric mods"
                url = "https://github.com/trethore/Weave"
                licenses {
                    license {
                        name = "MIT License"
                        url = "https://opensource.org/licenses/MIT"
                    }
                }
                scm {
                    url = "https://github.com/trethore/Weave"
                    connection = "scm:git:https://github.com/trethore/Weave.git"
                    developerConnection = "scm:git:ssh://git@github.com/trethore/Weave.git"
                }
            }
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/trethore/Weave")
            credentials {
                username = System.getenv("GITHUB_ACTOR") ?: (findProperty("gpr.user") ?: "")
                password = System.getenv("GITHUB_TOKEN") ?: (findProperty("gpr.key") ?: "")
            }
        }
    }
}
